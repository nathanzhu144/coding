
CXX = g++
CXXFLAGS = -g -o0 --std=c++11

printing_binary_tree_vertically_hash: printing_binary_tree_vertically_hash.o
	$(CXX) $(CXXFLAGS) printing_binary_tree_vertically_hash.cpp -o printing_binary_tree_vertically_hash.exe

find_if_two_in_array_add_up_hash: find_if_two_in_array_add_up_hash.o
	$(CXX) $(CXXFLAGS) find_if_two_in_array_add_up_hash.cpp -o find_if_two_in_array_add_up_hash.exe

group_multiple_occurrences_hash: group_multiple_occurrences_hash.o
	$(CXX) $(CXXFLAGS) group_multiple_occurrences_hash.cpp -o group_multiple_occurrences_hash.exe

find_symmetrical_pairs_hash: find_symmetrical_pairs_hash.o
	$(CXX) $(CXXFLAGS) find_symmetrical_pairs_hash.cpp -o find_symmetrical_pairs_hash.exe

find_missing_elements_in_range_hash: find_missing_elements_in_range_hash.o
	$(CXX) $(CXXFLAGS) find_missing_elements_in_range_hash.cpp -o find_missing_elements_in_range_hash.exe

count_pairs_given_sum_hash: count_pairs_given_sum_hash.o
	$(CXX) $(CXXFLAGS) count_pairs_given_sum_hash.cpp -o count_pairs_given_sum_hash.exe

max_distance_between_two_same: max_distance_between_two_same.o
	 $(CXX) $(CXXFLAGS) max_distance_between_two_same.cpp -o max_distance_between_two_same.exe

check_if_array_can_be_divided_into_pair_divisible_by_k: check_if_array_can_be_divided_into_pair_divisible_by_k.o
	 $(CXX) $(CXXFLAGS) check_if_array_can_be_divided_into_pair_divisible_by_k.cpp -o check_if_array_can_be_divided_into_pair_divisible_by_k.
	 
find_number_employees_under_every_employee:  find_number_employees_under_every_employee.o
	$(CXX) $(CXXFLAGS) find_number_employees_under_every_employee.cpp -o find_number_employees_under_every_employee.exe

num_subarrays_equal_to_k: num_subarrays_equal_to_k.o
	$(CXX) $(CXXFLAGS) num_subarrays_equal_to_k.cpp -o num_subarrays_equal_to_k.exe

two_sum: two_sum.o
	$(CXX) $(CXXFLAGS) two_sum.cpp -o two_sum.exe

clean:
	rm *.exe *.o